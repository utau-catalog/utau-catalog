import {
  SlashCommandBuilder,
  EmbedBuilder,
  ActionRowBuilder,
  StringSelectMenuBuilder,
  ComponentType,
} from "discord.js";
import { setupGoogleSheetsAPI } from "../auth.js";

const errorMessages = {
  noData: {
    ja: "‚ö†Ô∏è„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„Éà„Å´„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ",
    ko: "‚ö†Ô∏èÏä§ÌîÑÎ†àÎìúÏãúÌä∏Ïóê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.",
    "en-US": "‚ö†Ô∏èNo data found in the spreadsheet.",
    "zh-TW": "‚ö†Ô∏èË©¶ÁÆóË°®‰∏≠Êâæ‰∏çÂà∞Ë≥áÊñô„ÄÇ",
  },
  notFound: {
    ja: (name) =>
      `„Äå‚ö†Ô∏è${name}„Äç„Å®„ÅÑ„ÅÜÂêçÂâç„ÅÆ„Ç≠„É£„É©„ÇØ„Çø„Éº„ÅØË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ`,
    ko: (name) => `'‚ö†Ô∏è${name}'Ïù¥ÎùºÎäî Ïù¥Î¶ÑÏùò Ï∫êÎ¶≠ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.`,
    "en-US": (name) => `‚ö†Ô∏èNo character found with the name '${name}'.`,
    "zh-TW": (name) => `‚ö†Ô∏èÊâæ‰∏çÂà∞ÂêçÁÇ∫„Äå${name}„ÄçÁöÑËßíËâ≤„ÄÇ`,
  },
  fetchError: {
    ja: "‚ö†Ô∏è„Éá„Éº„ÇøÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ",
    ko: "‚ö†Ô∏èÎç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.",
    "en-US": "‚ö†Ô∏èAn error occurred while fetching data.",
    "zh-TW": "‚ö†Ô∏èÁç≤ÂèñË≥áÊñôÊôÇÁôºÁîüÈåØË™§„ÄÇ",
  },
};

const uiMessages = {
  placeholderText: {
    ja: "„Ç≠„É£„É©„ÇØ„Çø„Éº„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ",
    ko: "Ï∫êÎ¶≠ÌÑ∞Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî",
    "en-US": "Please select a character",
    "zh-TW": "Ë´ãÈÅ∏Êìá‰∏ÄÂÄãËßíËâ≤",
  },
  noDescription: {
    ja: "Ë™¨Êòé„Å™„Åó",
    ko: "ÏÑ§Î™Ö ÏóÜÏùå",
    "en-US": "No description",
    "zh-TW": "ÁÑ°ÊèèËø∞",
  },
  multipleMatches: {
    ja: "üîç Ë©≤ÂΩì„Åô„Çã„Ç≠„É£„É©„ÇØ„Çø„Éº„ÅåË§áÊï∞Ë¶ã„Å§„Åã„Çä„Åæ„Åó„Åü„ÄÇÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑÔºö",
    ko: "üîç Ìï¥ÎãπÌïòÎäî Ï∫êÎ¶≠ÌÑ∞Í∞Ä Ïó¨Îü¨ Î™Ö Î∞úÍ≤¨ÎêòÏóàÏäµÎãàÎã§. ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî:",
    "en-US": "üîç Multiple matching characters found. Please select one:",
    "zh-TW": "üîç ÊâæÂà∞Â§öÂÄãÁõ∏Á¨¶ÁöÑËßíËâ≤„ÄÇË´ãÈÅ∏ÊìáÂÖ∂‰∏≠‰∏ÄÂÄãÔºö",
  },
  noChannel: {
    ja: "‚ö†Ô∏è„É°„ÉÉ„Çª„Éº„Ç∏„ÉÅ„É£„É≥„Éç„É´„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ",
    ko: "‚ö†Ô∏èÎ©îÏãúÏßÄ Ï±ÑÎÑêÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.",
    "en-US": "‚ö†Ô∏èMessage channel not found.",
    "zh-TW": "‚ö†Ô∏èÊâæ‰∏çÂà∞Ë®äÊÅØÈ†ªÈÅì„ÄÇ",
  },
  unauthorizedUser: {
    ja: "‚ö†Ô∏è„Åì„ÅÆ„É°„Éã„É•„Éº„ÅØ„Ç≥„Éû„É≥„Éâ„ÇíÂÆüË°å„Åó„Åü„É¶„Éº„Ç∂„ÉºÂ∞ÇÁî®„Åß„Åô„ÄÇ‰ªñ„ÅÆÊñπ„ÅØÊìç‰Ωú„Åß„Åç„Åæ„Åõ„Çì„ÄÇ",
    ko: "‚ö†Ô∏èÏù¥ Î©îÎâ¥Îäî Î™ÖÎ†πÏùÑ Ïã§ÌñâÌïú ÏÇ¨Ïö©Ïûê Ï†ÑÏö©ÏûÖÎãàÎã§. Îã§Î•∏ ÏÇ¨Ïö©ÏûêÎäî Ï°∞ÏûëÌï† Ïàò ÏóÜÏäµÎãàÎã§.",
    "en-US": "‚ö†Ô∏èThis menu is only for the user who ran the command. Others cannot use it.",
    "zh-TW": "‚ö†Ô∏èÊ≠§ÈÅ∏ÂñÆÂÉÖÈôêÂü∑Ë°åÊåá‰ª§ÁöÑ‰ΩøÁî®ËÄÖ‰ΩøÁî®ÔºåÂÖ∂‰ªñ‰∫∫ÁÑ°Ê≥ïÊìç‰Ωú„ÄÇ",
  },
  timeout: {
    ja: "‚ö†Ô∏èÊôÇÈñìÂàá„Çå„Åß„Åô„ÄÇ„ÇÇ„ÅÜ‰∏ÄÂ∫¶Ê§úÁ¥¢„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
    ko: "‚ö†Ô∏èÏãúÍ∞Ñ Ï¥àÍ≥ºÏûÖÎãàÎã§. Îã§Ïãú Í≤ÄÏÉâÌï¥Ï£ºÏÑ∏Ïöî.",
    "en-US": "‚ö†Ô∏èTimed out. Please try searching again.",
    "zh-TW": "‚ö†Ô∏èÊìç‰ΩúÈÄæÊôÇ„ÄÇË´ãÈáçÊñ∞ÊêúÂ∞ã„ÄÇ",
  },
  generalError: {
    ja: "‚ö†Ô∏è„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ",
    ko: "‚ö†Ô∏èÏò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.",
    "en-US": "‚ö†Ô∏èAn error has occurred.",
    "zh-TW": "‚ö†Ô∏èÁôºÁîüÈåØË™§„ÄÇ",
  },
};

export const data = new SlashCommandBuilder()
  .setName("search")
  .setDescription("ÂêçÂâç„Åå‰∏ÄËá¥„Åô„Çã„Ç≠„É£„É©„ÇØ„Çø„ÉºÊÉÖÂ†±„ÇíË°®Á§∫„Åô„Çã")
  .setDescriptionLocalizations({
    ko: "Ïù¥Î¶ÑÏù¥ ÏùºÏπòÌïòÎäî Ï∫êÎ¶≠ÌÑ∞ Ï†ïÎ≥¥Î•º ÌëúÏãúÌï©ÎãàÎã§",
    "en-US": "Displaying character information that matches the name",
    "zh-TW": "È°ØÁ§∫ÂêçÁ®±Áõ∏Á¨¶ÁöÑËßíËâ≤Ë≥áË®ä",
  })
  .addStringOption((option) =>
    option
      .setName("name")
      .setDescription("„Ç≠„É£„É©„ÇØ„Çø„Éº„ÅÆÂêçÂâç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ")
      .setDescriptionLocalizations({
        ko: "Ï∫êÎ¶≠ÌÑ∞Ïùò Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî",
        "en-US": "Please enter the character's name",
        "zh-TW": "Ë´ãËº∏ÂÖ•ËßíËâ≤ÁöÑÂêçÁ®±",
      })
      .setRequired(true),
  );

export async function execute(interaction) {
  const supportedLangs = ["ja", "ko", "en-US", "zh-TW"];
  const lang = supportedLangs.includes(interaction.locale) ? interaction.locale : "ja";
  const name = interaction.options.getString("name");
  
  try {
    // ÊúÄÂàù„Å´ÂøúÁ≠î„Çí‰øùÁïô
    await interaction.deferReply({ flags: 0 });

    const { sheets } = await setupGoogleSheetsAPI();

    const SPREADSHEET_ID = "1A4kmhZo9ZGlr4IZZiPSnUoo7p9FnSH9ujn0Bij7euY4";
    const RANGE = "„Ç∑„Éº„Éà1!A:E"; // ÂêçÂâç„ÄÅË™¨Êòé„ÄÅURL„ÄÅ„Çµ„É†„Éç„Ç§„É´„ÄÅÂ§ß„Åç„Å™ÁîªÂÉè„ÅÆÂàó„ÇíÂê´„ÇÄÁØÑÂõ≤

    // Google„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„Éà„Åã„Çâ„Éá„Éº„Çø„ÇíÂèñÂæó
    const result = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: RANGE,
    });

    const rows = result?.data?.values;
    if (!rows || rows.length === 0) {
      const errorMessage = errorMessages.noData[lang];
      await interaction.editReply(errorMessage);
      return;
    }
    
    const normalize = (text) => text?.toLowerCase().replace(/\s/g, "").normalize("NFKC");
    const input = normalize(name);
    
    // ÂÆåÂÖ®‰∏ÄËá¥„ÇíÊé¢„Åô
    const matchedRow = rows.find((row) => normalize(row[0]) === input);
    // ‰∏ÄÈÉ®‰∏ÄËá¥„ÇíÊé¢„Åô
    const partialMatches = rows.filter((row) => row[0]?.toLowerCase().includes(name.toLowerCase()));
    
    if (matchedRow) {
      return await sendCharacterEmbed(interaction, matchedRow);
    }

    if (partialMatches.length === 0) {
      const errorMessage = errorMessages.notFound[lang](name);
      return await interaction.editReply(errorMessage);
    }
    
    if (partialMatches.length === 1) {
      return await sendCharacterEmbed(interaction, partialMatches[0]);
    }

    // Ë§áÊï∞ÂÄôË£ú ‚Üí „Çª„É¨„ÇØ„Éà„É°„Éã„É•„Éº„ÇíË°®Á§∫
    const options = partialMatches.slice(0, 25).map((row, index) => ({
      label: (row[0] || `No name ${index}`).slice(0, 100),
      ddescription: (row[1] || uiMessages.noDescription[lang]).slice(0, 100),
      value: index.toString(),
    }));

    const selectMenu = new StringSelectMenuBuilder()
      .setCustomId("select_character")
      .setPlaceholder(uiMessages.placeholderText[lang])
      .addOptions(options);
    
    const row = new ActionRowBuilder().addComponents(selectMenu);
    
    await interaction.editReply({
      content: uiMessages.multipleMatches[lang],
      components: [row],
    });

    // „Ç≥„É¨„ÇØ„Çø„Éº„Åß„É¶„Éº„Ç∂„Éº„ÅÆÈÅ∏Êäû„ÇíÂæÖÊ©ü
    const collector = interaction.channel.createMessageComponentCollector({
      componentType: ComponentType.StringSelect ?? 3,
      time: 15000, // 15Áßí„Åß„Çø„Ç§„É†„Ç¢„Ç¶„Éà
      max: 1,
    });
    
    collector.on("collect", async (i) => {
      if (!interaction.channel) {
        await interaction.editReply(uiMessages.noChannel[lang]);
        return;
      }
      if (i.user.id !== interaction.user.id) {
        return await i.reply({
          content: uiMessages.unauthorizedUser[lang],
          flags: 64
        });
      }
    
      const selectedIndex = parseInt(i.values[0]);
      const selectedRow = partialMatches[selectedIndex];
    
      await i.update({ components: [] });
      await sendCharacterEmbed(interaction, selectedRow);
    });
    collector.on("end", async (collected) => {
      if (collected.size === 0) {
        await interaction.editReply({
          content: uiMessages.timeout[lang],
          components: [],
        });
      }
    });
  } catch (error) {
    console.error("„Ç®„É©„Éº:", error);
    if (interaction.replied || interaction.deferred) {
      await interaction.followUp({
        content: uiMessages.generalError[lang],
        flags: 64,
      });
    } else {
      await interaction.editReply({
        content: `${errorMessages.fetchError[lang]}`,
        flags: 64,
      });
    }
  }
}
function convertGoogleDriveLink(link) {
  const match = link?.match(/\/file\/d\/([-_\w]+)\//);
  return match ? `https://drive.google.com/uc?id=${match[1]}` : link;
}
function createEmbed(row) {
  const embed = new EmbedBuilder()
    .setTitle(row[0])
    .setDescription(row[1] || "")
    .setColor("#54e8e6");

  const mainImage = convertGoogleDriveLink(row[3]);
  const thumb = convertGoogleDriveLink(row[4]);

  if (mainImage) embed.setImage(mainImage);
  if (thumb) embed.setThumbnail(thumb);
  if (row[2]) {
    embed.addFields([{ name: "ÈÖçÂ∏ÉÊâÄURL", value: row[2], inline: false }]);
  }
  return embed;
}
async function sendCharacterEmbed(interaction, row) {
  const embed = createEmbed(row);
  await interaction.editReply({ content: "", embeds: [embed], components: [] });
}
